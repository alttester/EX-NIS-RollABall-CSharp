name: Build RollABall

on:
  workflow_dispatch:
    inputs:
      windows:
        description: 'Build for Windows'
        type: boolean
        default: false
      macos:
        description: 'Build for macOS'
        type: boolean
        default: false
      android:
        description: 'Build for Android'
        type: boolean
        default: false
      webgl:
        description: 'Build for WebGL'
        type: boolean
        default: false
      branch:
        description: 'Branch to checkout for AltTester submodule'
        default: 'development'
        required: true
      host:
        description: 'AltServer Host'
        default: '127.0.0.1'
      port:
        description: 'AltServer Port'
        default: '13000'

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  get-selected-platforms:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set Matrix
        id: set-matrix
        run: |
          platforms=()
          if ${{ github.event.inputs.windows }}; then platforms+=("windows"); fi
          if ${{ github.event.inputs.macos }}; then platforms+=("macos"); fi
          if ${{ github.event.inputs.android }}; then platforms+=("android"); fi
          if ${{ github.event.inputs.webgl }}; then platforms+=("webgl"); fi

          json=""
          sep=""
          for platform in "${platforms[@]}"; do
            case "${platform,,}" in
              windows) os='["self-hosted", "Windows", "product"]'; plat='Windows' ;;
              macos) os='["self-hosted", "MAC37"]'; plat='macOS' ;;
              android) os='["self-hosted", "MAC37"]'; plat='Android' ;;
              webgl) os='["self-hosted", "MAC37"]'; plat='WebGL' ;;
              *) continue ;;
            esac
            json="${json}${sep}{\"platform\":\"$plat\",\"os\":$os}"
            sep=","
          done

          echo "matrix=[${json}]" >> $GITHUB_OUTPUT

  build:
    needs: get-selected-platforms
    strategy:
      matrix:
        include: ${{ fromJson(needs.get-selected-platforms.outputs.platforms) }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Update Submodules
        run: |
          git submodule foreach --recursive git reset --hard
          git submodule foreach --recursive git clean -fd
          git submodule update --init --recursive

      - name: Checkout AltTester Submodule Branch
        run: |
          cd RollABall/Assets/AltTester-Unity-SDK
          git fetch
          git checkout "${{ github.event.inputs.branch || 'development' }}"
          git pull --rebase origin "${{ github.event.inputs.branch || 'development' }}"

      - name: Cleanup duplicate TextMesh Pro and Unity cache
        run: |
          echo "Removing duplicate TextMesh Pro folder from AltTester submodule"
          rm -rf RollABall/Assets/AltTester-Unity-SDK/Assets/TextMesh\ Pro
          echo "Removing Unity cache folders to ensure clean build"
          rm -rf RollABall/Library RollABall/Temp RollABall/obj RollABall/Logs

      - name: Build RollABall
        run: |
          export ALTSERVER_PORT=${{ github.event.inputs.port }}
          export ALTSERVER_HOST="${{ github.event.inputs.host }}"
          case "${{ matrix.platform }}" in
            Windows)
              "$UNITY_2021_3_HOME" -batchmode -stackTraceLogType None -projectPath $GITHUB_WORKSPACE/RollABall -executeMethod BuildRollABall.WindowsBuildFromCommandLine -logFile buildWindows.log -quit
              ;;
            macOS)
              $UNITY_2021_3_HOME -batchmode -stackTraceLogType None -projectPath $CI_PROJECT_DIR/RollABall -executeMethod BuildRollABall.MacBuildFromCommandLine -logFile buildMac.log -quit
              ;;
            Android)
              $UNITY_2021_3_HOME -batchmode -stackTraceLogType None -projectPath $CI_PROJECT_DIR/RollABall -executeMethod BuildRollABall.AndroidBuildFromCommandLine -logFile buildAndroid.log -quit
              ;;
            WebGL)
              $UNITY_2021_3_HOME -batchmode -stackTraceLogType None -projectPath $CI_PROJECT_DIR/RollABall -executeMethod BuildRollABall.WebGLBuildFromCommandLine -logFile buildWebGL.log -quit
              ;;
          esac

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Build-${{ matrix.platform }}-Artifact
          path: |
            **/*.log
            **/RollABallBuild/*
            **/RollABall.apk
            **/RollABall.app
            **/build/webgl
